// Computer_System_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module Computer_System_mm_interconnect_0 (
		input  wire [11:0]  ARM_A9_HPS_h2f_axi_master_awid,                                        //                                       ARM_A9_HPS_h2f_axi_master.awid
		input  wire [29:0]  ARM_A9_HPS_h2f_axi_master_awaddr,                                      //                                                                .awaddr
		input  wire [3:0]   ARM_A9_HPS_h2f_axi_master_awlen,                                       //                                                                .awlen
		input  wire [2:0]   ARM_A9_HPS_h2f_axi_master_awsize,                                      //                                                                .awsize
		input  wire [1:0]   ARM_A9_HPS_h2f_axi_master_awburst,                                     //                                                                .awburst
		input  wire [1:0]   ARM_A9_HPS_h2f_axi_master_awlock,                                      //                                                                .awlock
		input  wire [3:0]   ARM_A9_HPS_h2f_axi_master_awcache,                                     //                                                                .awcache
		input  wire [2:0]   ARM_A9_HPS_h2f_axi_master_awprot,                                      //                                                                .awprot
		input  wire         ARM_A9_HPS_h2f_axi_master_awvalid,                                     //                                                                .awvalid
		output wire         ARM_A9_HPS_h2f_axi_master_awready,                                     //                                                                .awready
		input  wire [11:0]  ARM_A9_HPS_h2f_axi_master_wid,                                         //                                                                .wid
		input  wire [127:0] ARM_A9_HPS_h2f_axi_master_wdata,                                       //                                                                .wdata
		input  wire [15:0]  ARM_A9_HPS_h2f_axi_master_wstrb,                                       //                                                                .wstrb
		input  wire         ARM_A9_HPS_h2f_axi_master_wlast,                                       //                                                                .wlast
		input  wire         ARM_A9_HPS_h2f_axi_master_wvalid,                                      //                                                                .wvalid
		output wire         ARM_A9_HPS_h2f_axi_master_wready,                                      //                                                                .wready
		output wire [11:0]  ARM_A9_HPS_h2f_axi_master_bid,                                         //                                                                .bid
		output wire [1:0]   ARM_A9_HPS_h2f_axi_master_bresp,                                       //                                                                .bresp
		output wire         ARM_A9_HPS_h2f_axi_master_bvalid,                                      //                                                                .bvalid
		input  wire         ARM_A9_HPS_h2f_axi_master_bready,                                      //                                                                .bready
		input  wire [11:0]  ARM_A9_HPS_h2f_axi_master_arid,                                        //                                                                .arid
		input  wire [29:0]  ARM_A9_HPS_h2f_axi_master_araddr,                                      //                                                                .araddr
		input  wire [3:0]   ARM_A9_HPS_h2f_axi_master_arlen,                                       //                                                                .arlen
		input  wire [2:0]   ARM_A9_HPS_h2f_axi_master_arsize,                                      //                                                                .arsize
		input  wire [1:0]   ARM_A9_HPS_h2f_axi_master_arburst,                                     //                                                                .arburst
		input  wire [1:0]   ARM_A9_HPS_h2f_axi_master_arlock,                                      //                                                                .arlock
		input  wire [3:0]   ARM_A9_HPS_h2f_axi_master_arcache,                                     //                                                                .arcache
		input  wire [2:0]   ARM_A9_HPS_h2f_axi_master_arprot,                                      //                                                                .arprot
		input  wire         ARM_A9_HPS_h2f_axi_master_arvalid,                                     //                                                                .arvalid
		output wire         ARM_A9_HPS_h2f_axi_master_arready,                                     //                                                                .arready
		output wire [11:0]  ARM_A9_HPS_h2f_axi_master_rid,                                         //                                                                .rid
		output wire [127:0] ARM_A9_HPS_h2f_axi_master_rdata,                                       //                                                                .rdata
		output wire [1:0]   ARM_A9_HPS_h2f_axi_master_rresp,                                       //                                                                .rresp
		output wire         ARM_A9_HPS_h2f_axi_master_rlast,                                       //                                                                .rlast
		output wire         ARM_A9_HPS_h2f_axi_master_rvalid,                                      //                                                                .rvalid
		input  wire         ARM_A9_HPS_h2f_axi_master_rready,                                      //                                                                .rready
		input  wire         System_PLL_sys_clk_clk,                                                //                                              System_PLL_sys_clk.clk
		input  wire         ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire         sdram2module_reset_reset_bridge_in_reset_reset,                        //                        sdram2module_reset_reset_bridge_in_reset.reset
		input  wire         SDRAM_reset_reset_bridge_in_reset_reset,                               //                               SDRAM_reset_reset_bridge_in_reset.reset
		input  wire [25:0]  module2sdram_write_master_address,                                     //                                       module2sdram_write_master.address
		output wire         module2sdram_write_master_waitrequest,                                 //                                                                .waitrequest
		input  wire [3:0]   module2sdram_write_master_byteenable,                                  //                                                                .byteenable
		input  wire         module2sdram_write_master_chipselect,                                  //                                                                .chipselect
		input  wire         module2sdram_write_master_write,                                       //                                                                .write
		input  wire [31:0]  module2sdram_write_master_writedata,                                   //                                                                .writedata
		input  wire [25:0]  sdram2module_read_master_address,                                      //                                        sdram2module_read_master.address
		output wire         sdram2module_read_master_waitrequest,                                  //                                                                .waitrequest
		input  wire         sdram2module_read_master_chipselect,                                   //                                                                .chipselect
		input  wire         sdram2module_read_master_read,                                         //                                                                .read
		output wire [31:0]  sdram2module_read_master_readdata,                                     //                                                                .readdata
		output wire         sdram2module_read_master_readdatavalid,                                //                                                                .readdatavalid
		output wire [24:0]  SDRAM_s1_address,                                                      //                                                        SDRAM_s1.address
		output wire         SDRAM_s1_write,                                                        //                                                                .write
		output wire         SDRAM_s1_read,                                                         //                                                                .read
		input  wire [15:0]  SDRAM_s1_readdata,                                                     //                                                                .readdata
		output wire [15:0]  SDRAM_s1_writedata,                                                    //                                                                .writedata
		output wire [1:0]   SDRAM_s1_byteenable,                                                   //                                                                .byteenable
		input  wire         SDRAM_s1_readdatavalid,                                                //                                                                .readdatavalid
		input  wire         SDRAM_s1_waitrequest,                                                  //                                                                .waitrequest
		output wire         SDRAM_s1_chipselect                                                    //                                                                .chipselect
	);

	wire          sdram2module_read_master_translator_avalon_universal_master_0_waitrequest;    // sdram2module_read_master_agent:av_waitrequest -> sdram2module_read_master_translator:uav_waitrequest
	wire   [31:0] sdram2module_read_master_translator_avalon_universal_master_0_readdata;       // sdram2module_read_master_agent:av_readdata -> sdram2module_read_master_translator:uav_readdata
	wire          sdram2module_read_master_translator_avalon_universal_master_0_debugaccess;    // sdram2module_read_master_translator:uav_debugaccess -> sdram2module_read_master_agent:av_debugaccess
	wire   [29:0] sdram2module_read_master_translator_avalon_universal_master_0_address;        // sdram2module_read_master_translator:uav_address -> sdram2module_read_master_agent:av_address
	wire          sdram2module_read_master_translator_avalon_universal_master_0_read;           // sdram2module_read_master_translator:uav_read -> sdram2module_read_master_agent:av_read
	wire    [3:0] sdram2module_read_master_translator_avalon_universal_master_0_byteenable;     // sdram2module_read_master_translator:uav_byteenable -> sdram2module_read_master_agent:av_byteenable
	wire          sdram2module_read_master_translator_avalon_universal_master_0_readdatavalid;  // sdram2module_read_master_agent:av_readdatavalid -> sdram2module_read_master_translator:uav_readdatavalid
	wire          sdram2module_read_master_translator_avalon_universal_master_0_lock;           // sdram2module_read_master_translator:uav_lock -> sdram2module_read_master_agent:av_lock
	wire          sdram2module_read_master_translator_avalon_universal_master_0_write;          // sdram2module_read_master_translator:uav_write -> sdram2module_read_master_agent:av_write
	wire   [31:0] sdram2module_read_master_translator_avalon_universal_master_0_writedata;      // sdram2module_read_master_translator:uav_writedata -> sdram2module_read_master_agent:av_writedata
	wire    [2:0] sdram2module_read_master_translator_avalon_universal_master_0_burstcount;     // sdram2module_read_master_translator:uav_burstcount -> sdram2module_read_master_agent:av_burstcount
	wire          module2sdram_write_master_translator_avalon_universal_master_0_waitrequest;   // module2sdram_write_master_agent:av_waitrequest -> module2sdram_write_master_translator:uav_waitrequest
	wire   [31:0] module2sdram_write_master_translator_avalon_universal_master_0_readdata;      // module2sdram_write_master_agent:av_readdata -> module2sdram_write_master_translator:uav_readdata
	wire          module2sdram_write_master_translator_avalon_universal_master_0_debugaccess;   // module2sdram_write_master_translator:uav_debugaccess -> module2sdram_write_master_agent:av_debugaccess
	wire   [29:0] module2sdram_write_master_translator_avalon_universal_master_0_address;       // module2sdram_write_master_translator:uav_address -> module2sdram_write_master_agent:av_address
	wire          module2sdram_write_master_translator_avalon_universal_master_0_read;          // module2sdram_write_master_translator:uav_read -> module2sdram_write_master_agent:av_read
	wire    [3:0] module2sdram_write_master_translator_avalon_universal_master_0_byteenable;    // module2sdram_write_master_translator:uav_byteenable -> module2sdram_write_master_agent:av_byteenable
	wire          module2sdram_write_master_translator_avalon_universal_master_0_readdatavalid; // module2sdram_write_master_agent:av_readdatavalid -> module2sdram_write_master_translator:uav_readdatavalid
	wire          module2sdram_write_master_translator_avalon_universal_master_0_lock;          // module2sdram_write_master_translator:uav_lock -> module2sdram_write_master_agent:av_lock
	wire          module2sdram_write_master_translator_avalon_universal_master_0_write;         // module2sdram_write_master_translator:uav_write -> module2sdram_write_master_agent:av_write
	wire   [31:0] module2sdram_write_master_translator_avalon_universal_master_0_writedata;     // module2sdram_write_master_translator:uav_writedata -> module2sdram_write_master_agent:av_writedata
	wire    [2:0] module2sdram_write_master_translator_avalon_universal_master_0_burstcount;    // module2sdram_write_master_translator:uav_burstcount -> module2sdram_write_master_agent:av_burstcount
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                   // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire   [29:0] sdram_s1_agent_m0_address;                                                    // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                 // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                       // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                              // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                       // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                  // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                      // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                 // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                               // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire  [109:0] sdram_s1_agent_rf_source_data;                                                // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                               // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                       // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                         // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                            // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire  [109:0] sdram_s1_agent_rsp_fifo_out_data;                                             // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                            // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                    // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                      // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                          // SDRAM_s1_agent:rdata_fifo_src_valid -> SDRAM_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                           // SDRAM_s1_agent:rdata_fifo_src_data -> SDRAM_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                          // SDRAM_s1_agent_rdata_fifo:in_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_valid;                               // ARM_A9_HPS_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [234:0] arm_a9_hps_h2f_axi_master_agent_write_cp_data;                                // ARM_A9_HPS_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_ready;                               // router:sink_ready -> ARM_A9_HPS_h2f_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket;                       // ARM_A9_HPS_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket;                         // ARM_A9_HPS_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_valid;                                // ARM_A9_HPS_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [234:0] arm_a9_hps_h2f_axi_master_agent_read_cp_data;                                 // ARM_A9_HPS_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_ready;                                // router_001:sink_ready -> ARM_A9_HPS_h2f_axi_master_agent:read_cp_ready
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket;                        // ARM_A9_HPS_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket;                          // ARM_A9_HPS_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          sdram2module_read_master_agent_cp_valid;                                      // sdram2module_read_master_agent:cp_valid -> router_002:sink_valid
	wire  [126:0] sdram2module_read_master_agent_cp_data;                                       // sdram2module_read_master_agent:cp_data -> router_002:sink_data
	wire          sdram2module_read_master_agent_cp_ready;                                      // router_002:sink_ready -> sdram2module_read_master_agent:cp_ready
	wire          sdram2module_read_master_agent_cp_startofpacket;                              // sdram2module_read_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          sdram2module_read_master_agent_cp_endofpacket;                                // sdram2module_read_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          module2sdram_write_master_agent_cp_valid;                                     // module2sdram_write_master_agent:cp_valid -> router_003:sink_valid
	wire  [126:0] module2sdram_write_master_agent_cp_data;                                      // module2sdram_write_master_agent:cp_data -> router_003:sink_data
	wire          module2sdram_write_master_agent_cp_ready;                                     // router_003:sink_ready -> module2sdram_write_master_agent:cp_ready
	wire          module2sdram_write_master_agent_cp_startofpacket;                             // module2sdram_write_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          module2sdram_write_master_agent_cp_endofpacket;                               // module2sdram_write_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                      // SDRAM_s1_agent:rp_valid -> router_004:sink_valid
	wire  [108:0] sdram_s1_agent_rp_data;                                                       // SDRAM_s1_agent:rp_data -> router_004:sink_data
	wire          sdram_s1_agent_rp_ready;                                                      // router_004:sink_ready -> SDRAM_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                              // SDRAM_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                // SDRAM_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                         // router_004:src_valid -> rsp_demux:sink_valid
	wire  [108:0] router_004_src_data;                                                          // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                                         // rsp_demux:sink_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                                       // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                                 // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                                   // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                            // cmd_mux:src_valid -> SDRAM_s1_burst_adapter:sink0_valid
	wire  [108:0] cmd_mux_src_data;                                                             // cmd_mux:src_data -> SDRAM_s1_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                            // SDRAM_s1_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                                          // cmd_mux:src_channel -> SDRAM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                    // cmd_mux:src_startofpacket -> SDRAM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                      // cmd_mux:src_endofpacket -> SDRAM_s1_burst_adapter:sink0_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                         // SDRAM_s1_burst_adapter:source0_valid -> SDRAM_s1_agent:cp_valid
	wire  [108:0] sdram_s1_burst_adapter_source0_data;                                          // SDRAM_s1_burst_adapter:source0_data -> SDRAM_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                         // SDRAM_s1_agent:cp_ready -> SDRAM_s1_burst_adapter:source0_ready
	wire    [3:0] sdram_s1_burst_adapter_source0_channel;                                       // SDRAM_s1_burst_adapter:source0_channel -> SDRAM_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                 // SDRAM_s1_burst_adapter:source0_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                   // SDRAM_s1_burst_adapter:source0_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                         // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [108:0] cmd_demux_src0_data;                                                          // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                         // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                                       // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                 // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                   // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                     // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [108:0] cmd_demux_001_src0_data;                                                      // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                     // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [3:0] cmd_demux_001_src0_channel;                                                   // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                             // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                               // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                     // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [108:0] cmd_demux_002_src0_data;                                                      // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                     // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire    [3:0] cmd_demux_002_src0_channel;                                                   // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                             // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                               // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                     // cmd_demux_003:src0_valid -> cmd_mux:sink3_valid
	wire  [108:0] cmd_demux_003_src0_data;                                                      // cmd_demux_003:src0_data -> cmd_mux:sink3_data
	wire          cmd_demux_003_src0_ready;                                                     // cmd_mux:sink3_ready -> cmd_demux_003:src0_ready
	wire    [3:0] cmd_demux_003_src0_channel;                                                   // cmd_demux_003:src0_channel -> cmd_mux:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                             // cmd_demux_003:src0_startofpacket -> cmd_mux:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                               // cmd_demux_003:src0_endofpacket -> cmd_mux:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                                         // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [108:0] rsp_demux_src0_data;                                                          // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                         // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                                       // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                 // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                   // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                         // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [108:0] rsp_demux_src1_data;                                                          // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                         // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [3:0] rsp_demux_src1_channel;                                                       // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                 // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                   // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                         // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [108:0] rsp_demux_src2_data;                                                          // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                         // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire    [3:0] rsp_demux_src2_channel;                                                       // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                 // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                   // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                         // rsp_demux:src3_valid -> rsp_mux_003:sink0_valid
	wire  [108:0] rsp_demux_src3_data;                                                          // rsp_demux:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_src3_ready;                                                         // rsp_mux_003:sink0_ready -> rsp_demux:src3_ready
	wire    [3:0] rsp_demux_src3_channel;                                                       // rsp_demux:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_src3_startofpacket;                                                 // rsp_demux:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                   // rsp_demux:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_mux_src_valid;                                                            // rsp_mux:src_valid -> ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [108:0] rsp_mux_src_data;                                                             // rsp_mux:src_data -> ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_mux_src_ready;                                                            // ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                                          // rsp_mux:src_channel -> ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_mux_src_startofpacket;                                                    // rsp_mux:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                      // rsp_mux:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid;                     // ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_valid -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_valid
	wire  [234:0] arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data;                      // ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_data -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_data
	wire          arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready;                     // ARM_A9_HPS_h2f_axi_master_agent:write_rp_ready -> ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire    [3:0] arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel;                   // ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_channel -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_channel
	wire          arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;             // ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_startofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;               // ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                        // rsp_mux_001:src_valid -> ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [108:0] rsp_mux_001_src_data;                                                         // rsp_mux_001:src_data -> ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_mux_001_src_ready;                                                        // ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_mux_001:src_ready
	wire    [3:0] rsp_mux_001_src_channel;                                                      // rsp_mux_001:src_channel -> ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_mux_001_src_startofpacket;                                                // rsp_mux_001:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                  // rsp_mux_001:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid;                     // ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_valid -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_valid
	wire  [234:0] arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data;                      // ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_data -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_data
	wire          arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready;                     // ARM_A9_HPS_h2f_axi_master_agent:read_rp_ready -> ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire    [3:0] arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel;                   // ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_channel -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_channel
	wire          arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;             // ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_startofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;               // ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_endofpacket
	wire          rsp_mux_002_src_valid;                                                        // rsp_mux_002:src_valid -> sdram2module_read_master_rsp_width_adapter:in_valid
	wire  [108:0] rsp_mux_002_src_data;                                                         // rsp_mux_002:src_data -> sdram2module_read_master_rsp_width_adapter:in_data
	wire          rsp_mux_002_src_ready;                                                        // sdram2module_read_master_rsp_width_adapter:in_ready -> rsp_mux_002:src_ready
	wire    [3:0] rsp_mux_002_src_channel;                                                      // rsp_mux_002:src_channel -> sdram2module_read_master_rsp_width_adapter:in_channel
	wire          rsp_mux_002_src_startofpacket;                                                // rsp_mux_002:src_startofpacket -> sdram2module_read_master_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                  // rsp_mux_002:src_endofpacket -> sdram2module_read_master_rsp_width_adapter:in_endofpacket
	wire          sdram2module_read_master_rsp_width_adapter_src_valid;                         // sdram2module_read_master_rsp_width_adapter:out_valid -> sdram2module_read_master_agent:rp_valid
	wire  [126:0] sdram2module_read_master_rsp_width_adapter_src_data;                          // sdram2module_read_master_rsp_width_adapter:out_data -> sdram2module_read_master_agent:rp_data
	wire          sdram2module_read_master_rsp_width_adapter_src_ready;                         // sdram2module_read_master_agent:rp_ready -> sdram2module_read_master_rsp_width_adapter:out_ready
	wire    [3:0] sdram2module_read_master_rsp_width_adapter_src_channel;                       // sdram2module_read_master_rsp_width_adapter:out_channel -> sdram2module_read_master_agent:rp_channel
	wire          sdram2module_read_master_rsp_width_adapter_src_startofpacket;                 // sdram2module_read_master_rsp_width_adapter:out_startofpacket -> sdram2module_read_master_agent:rp_startofpacket
	wire          sdram2module_read_master_rsp_width_adapter_src_endofpacket;                   // sdram2module_read_master_rsp_width_adapter:out_endofpacket -> sdram2module_read_master_agent:rp_endofpacket
	wire          rsp_mux_003_src_valid;                                                        // rsp_mux_003:src_valid -> module2sdram_write_master_rsp_width_adapter:in_valid
	wire  [108:0] rsp_mux_003_src_data;                                                         // rsp_mux_003:src_data -> module2sdram_write_master_rsp_width_adapter:in_data
	wire          rsp_mux_003_src_ready;                                                        // module2sdram_write_master_rsp_width_adapter:in_ready -> rsp_mux_003:src_ready
	wire    [3:0] rsp_mux_003_src_channel;                                                      // rsp_mux_003:src_channel -> module2sdram_write_master_rsp_width_adapter:in_channel
	wire          rsp_mux_003_src_startofpacket;                                                // rsp_mux_003:src_startofpacket -> module2sdram_write_master_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                  // rsp_mux_003:src_endofpacket -> module2sdram_write_master_rsp_width_adapter:in_endofpacket
	wire          module2sdram_write_master_rsp_width_adapter_src_valid;                        // module2sdram_write_master_rsp_width_adapter:out_valid -> module2sdram_write_master_agent:rp_valid
	wire  [126:0] module2sdram_write_master_rsp_width_adapter_src_data;                         // module2sdram_write_master_rsp_width_adapter:out_data -> module2sdram_write_master_agent:rp_data
	wire          module2sdram_write_master_rsp_width_adapter_src_ready;                        // module2sdram_write_master_agent:rp_ready -> module2sdram_write_master_rsp_width_adapter:out_ready
	wire    [3:0] module2sdram_write_master_rsp_width_adapter_src_channel;                      // module2sdram_write_master_rsp_width_adapter:out_channel -> module2sdram_write_master_agent:rp_channel
	wire          module2sdram_write_master_rsp_width_adapter_src_startofpacket;                // module2sdram_write_master_rsp_width_adapter:out_startofpacket -> module2sdram_write_master_agent:rp_startofpacket
	wire          module2sdram_write_master_rsp_width_adapter_src_endofpacket;                  // module2sdram_write_master_rsp_width_adapter:out_endofpacket -> module2sdram_write_master_agent:rp_endofpacket
	wire          router_src_valid;                                                             // router:src_valid -> ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:in_valid
	wire  [234:0] router_src_data;                                                              // router:src_data -> ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:in_data
	wire          router_src_ready;                                                             // ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:in_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                                           // router:src_channel -> ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:in_channel
	wire          router_src_startofpacket;                                                     // router:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:in_startofpacket
	wire          router_src_endofpacket;                                                       // router:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:in_endofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_valid;                     // ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:out_valid -> cmd_demux:sink_valid
	wire  [108:0] arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_data;                      // ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:out_data -> cmd_demux:sink_data
	wire          arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_ready;                     // cmd_demux:sink_ready -> ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:out_ready
	wire    [3:0] arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_channel;                   // ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:out_channel -> cmd_demux:sink_channel
	wire          arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_startofpacket;             // ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_endofpacket;               // ARM_A9_HPS_h2f_axi_master_wr_cmd_width_adapter:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          router_001_src_valid;                                                         // router_001:src_valid -> ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:in_valid
	wire  [234:0] router_001_src_data;                                                          // router_001:src_data -> ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:in_data
	wire          router_001_src_ready;                                                         // ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:in_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                                       // router_001:src_channel -> ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                                 // router_001:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                                   // router_001:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:in_endofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_valid;                     // ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:out_valid -> cmd_demux_001:sink_valid
	wire  [108:0] arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_data;                      // ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:out_data -> cmd_demux_001:sink_data
	wire          arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_ready;                     // cmd_demux_001:sink_ready -> ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:out_ready
	wire    [3:0] arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_channel;                   // ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:out_channel -> cmd_demux_001:sink_channel
	wire          arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_startofpacket;             // ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_endofpacket;               // ARM_A9_HPS_h2f_axi_master_rd_cmd_width_adapter:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                         // router_002:src_valid -> sdram2module_read_master_cmd_width_adapter:in_valid
	wire  [126:0] router_002_src_data;                                                          // router_002:src_data -> sdram2module_read_master_cmd_width_adapter:in_data
	wire          router_002_src_ready;                                                         // sdram2module_read_master_cmd_width_adapter:in_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                                       // router_002:src_channel -> sdram2module_read_master_cmd_width_adapter:in_channel
	wire          router_002_src_startofpacket;                                                 // router_002:src_startofpacket -> sdram2module_read_master_cmd_width_adapter:in_startofpacket
	wire          router_002_src_endofpacket;                                                   // router_002:src_endofpacket -> sdram2module_read_master_cmd_width_adapter:in_endofpacket
	wire          sdram2module_read_master_cmd_width_adapter_src_valid;                         // sdram2module_read_master_cmd_width_adapter:out_valid -> cmd_demux_002:sink_valid
	wire  [108:0] sdram2module_read_master_cmd_width_adapter_src_data;                          // sdram2module_read_master_cmd_width_adapter:out_data -> cmd_demux_002:sink_data
	wire          sdram2module_read_master_cmd_width_adapter_src_ready;                         // cmd_demux_002:sink_ready -> sdram2module_read_master_cmd_width_adapter:out_ready
	wire    [3:0] sdram2module_read_master_cmd_width_adapter_src_channel;                       // sdram2module_read_master_cmd_width_adapter:out_channel -> cmd_demux_002:sink_channel
	wire          sdram2module_read_master_cmd_width_adapter_src_startofpacket;                 // sdram2module_read_master_cmd_width_adapter:out_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          sdram2module_read_master_cmd_width_adapter_src_endofpacket;                   // sdram2module_read_master_cmd_width_adapter:out_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          router_003_src_valid;                                                         // router_003:src_valid -> module2sdram_write_master_cmd_width_adapter:in_valid
	wire  [126:0] router_003_src_data;                                                          // router_003:src_data -> module2sdram_write_master_cmd_width_adapter:in_data
	wire          router_003_src_ready;                                                         // module2sdram_write_master_cmd_width_adapter:in_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                                       // router_003:src_channel -> module2sdram_write_master_cmd_width_adapter:in_channel
	wire          router_003_src_startofpacket;                                                 // router_003:src_startofpacket -> module2sdram_write_master_cmd_width_adapter:in_startofpacket
	wire          router_003_src_endofpacket;                                                   // router_003:src_endofpacket -> module2sdram_write_master_cmd_width_adapter:in_endofpacket
	wire          module2sdram_write_master_cmd_width_adapter_src_valid;                        // module2sdram_write_master_cmd_width_adapter:out_valid -> cmd_demux_003:sink_valid
	wire  [108:0] module2sdram_write_master_cmd_width_adapter_src_data;                         // module2sdram_write_master_cmd_width_adapter:out_data -> cmd_demux_003:sink_data
	wire          module2sdram_write_master_cmd_width_adapter_src_ready;                        // cmd_demux_003:sink_ready -> module2sdram_write_master_cmd_width_adapter:out_ready
	wire    [3:0] module2sdram_write_master_cmd_width_adapter_src_channel;                      // module2sdram_write_master_cmd_width_adapter:out_channel -> cmd_demux_003:sink_channel
	wire          module2sdram_write_master_cmd_width_adapter_src_startofpacket;                // module2sdram_write_master_cmd_width_adapter:out_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          module2sdram_write_master_cmd_width_adapter_src_endofpacket;                  // module2sdram_write_master_cmd_width_adapter:out_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                          // SDRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                           // SDRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter:in_0_ready -> SDRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                // avalon_st_adapter:out_0_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                 // avalon_st_adapter:out_0_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                // SDRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                // avalon_st_adapter:out_0_error -> SDRAM_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sdram2module_read_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                      //                       clk.clk
		.reset                  (sdram2module_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (sdram2module_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sdram2module_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sdram2module_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sdram2module_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sdram2module_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sdram2module_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sdram2module_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sdram2module_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sdram2module_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sdram2module_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sdram2module_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sdram2module_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sdram2module_read_master_waitrequest),                                        //                          .waitrequest
		.av_chipselect          (sdram2module_read_master_chipselect),                                         //                          .chipselect
		.av_read                (sdram2module_read_master_read),                                               //                          .read
		.av_readdata            (sdram2module_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (sdram2module_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) module2sdram_write_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                       //                       clk.clk
		.reset                  (sdram2module_reset_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address            (module2sdram_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (module2sdram_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (module2sdram_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (module2sdram_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (module2sdram_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (module2sdram_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (module2sdram_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (module2sdram_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (module2sdram_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (module2sdram_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (module2sdram_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (module2sdram_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (module2sdram_write_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (module2sdram_write_master_byteenable),                                         //                          .byteenable
		.av_chipselect          (module2sdram_write_master_chipselect),                                         //                          .chipselect
		.av_write               (module2sdram_write_master_write),                                              //                          .write
		.av_writedata           (module2sdram_write_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                         //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_read                (1'b0),                                                                         //               (terminated)
		.av_readdata            (),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                             //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                  //                      clk.clk
		.reset                  (SDRAM_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                  //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (SDRAM_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (SDRAM_s1_write),                          //                         .write
		.av_read                (SDRAM_s1_read),                           //                         .read
		.av_readdata            (SDRAM_s1_readdata),                       //                         .readdata
		.av_writedata           (SDRAM_s1_writedata),                      //                         .writedata
		.av_byteenable          (SDRAM_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (SDRAM_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (SDRAM_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (SDRAM_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (205),
		.PKT_CACHE_H               (229),
		.PKT_CACHE_L               (226),
		.PKT_ADDR_SIDEBAND_H       (203),
		.PKT_ADDR_SIDEBAND_L       (203),
		.PKT_PROTECTION_H          (225),
		.PKT_PROTECTION_L          (223),
		.PKT_BURST_SIZE_H          (200),
		.PKT_BURST_SIZE_L          (198),
		.PKT_BURST_TYPE_H          (202),
		.PKT_BURST_TYPE_L          (201),
		.PKT_RESPONSE_STATUS_L     (230),
		.PKT_RESPONSE_STATUS_H     (231),
		.PKT_BURSTWRAP_H           (197),
		.PKT_BURSTWRAP_L           (189),
		.PKT_BYTE_CNT_H            (188),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_TRANS_LOCK            (178),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (208),
		.PKT_SRC_ID_L              (207),
		.PKT_DEST_ID_H             (210),
		.PKT_DEST_ID_L             (209),
		.PKT_THREAD_ID_H           (222),
		.PKT_THREAD_ID_L           (211),
		.PKT_QOS_L                 (206),
		.PKT_QOS_H                 (206),
		.PKT_ORI_BURST_SIZE_L      (232),
		.PKT_ORI_BURST_SIZE_H      (234),
		.PKT_DATA_SIDEBAND_H       (204),
		.PKT_DATA_SIDEBAND_L       (204),
		.ST_DATA_W                 (235),
		.ST_CHANNEL_W              (4),
		.ID                        (0)
	) arm_a9_hps_h2f_axi_master_agent (
		.aclk                   (System_PLL_sys_clk_clk),                                                 //              clk.clk
		.aresetn                (~ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid),               //         write_rp.valid
		.write_rp_data          (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data),                //                 .data
		.write_rp_channel       (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel),             //                 .channel
		.write_rp_startofpacket (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),       //                 .startofpacket
		.write_rp_endofpacket   (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),         //                 .endofpacket
		.write_rp_ready         (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready),               //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid),               //          read_rp.valid
		.read_rp_data           (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data),                //                 .data
		.read_rp_channel        (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel),             //                 .channel
		.read_rp_startofpacket  (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),       //                 .startofpacket
		.read_rp_endofpacket    (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),         //                 .endofpacket
		.read_rp_ready          (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready),               //                 .ready
		.awid                   (ARM_A9_HPS_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (ARM_A9_HPS_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (ARM_A9_HPS_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (ARM_A9_HPS_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (ARM_A9_HPS_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (ARM_A9_HPS_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (ARM_A9_HPS_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (ARM_A9_HPS_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (ARM_A9_HPS_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (ARM_A9_HPS_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (ARM_A9_HPS_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (ARM_A9_HPS_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (ARM_A9_HPS_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (ARM_A9_HPS_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (ARM_A9_HPS_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (ARM_A9_HPS_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (ARM_A9_HPS_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (ARM_A9_HPS_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (ARM_A9_HPS_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (ARM_A9_HPS_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (ARM_A9_HPS_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (ARM_A9_HPS_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (ARM_A9_HPS_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (ARM_A9_HPS_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (ARM_A9_HPS_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (ARM_A9_HPS_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (ARM_A9_HPS_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (ARM_A9_HPS_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (ARM_A9_HPS_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (ARM_A9_HPS_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (ARM_A9_HPS_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (ARM_A9_HPS_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (ARM_A9_HPS_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (ARM_A9_HPS_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (ARM_A9_HPS_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (ARM_A9_HPS_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                   //      (terminated)
		.aruser                 (1'b0),                                                                   //      (terminated)
		.awqos                  (4'b0000),                                                                //      (terminated)
		.arqos                  (4'b0000),                                                                //      (terminated)
		.awregion               (4'b0000),                                                                //      (terminated)
		.arregion               (4'b0000),                                                                //      (terminated)
		.wuser                  (1'b0),                                                                   //      (terminated)
		.ruser                  (),                                                                       //      (terminated)
		.buser                  ()                                                                        //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (126),
		.PKT_ORI_BURST_SIZE_L      (124),
		.PKT_RESPONSE_STATUS_H     (123),
		.PKT_RESPONSE_STATUS_L     (122),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (121),
		.PKT_CACHE_L               (118),
		.PKT_THREAD_ID_H           (114),
		.PKT_THREAD_ID_L           (103),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (71),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (117),
		.PKT_PROTECTION_L          (115),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (101),
		.ST_DATA_W                 (127),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram2module_read_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                      //       clk.clk
		.reset                 (sdram2module_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (sdram2module_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sdram2module_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sdram2module_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sdram2module_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sdram2module_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sdram2module_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sdram2module_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sdram2module_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sdram2module_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sdram2module_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sdram2module_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sdram2module_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sdram2module_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sdram2module_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sdram2module_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sdram2module_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (sdram2module_read_master_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (sdram2module_read_master_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (sdram2module_read_master_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (sdram2module_read_master_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (sdram2module_read_master_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (sdram2module_read_master_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (126),
		.PKT_ORI_BURST_SIZE_L      (124),
		.PKT_RESPONSE_STATUS_H     (123),
		.PKT_RESPONSE_STATUS_L     (122),
		.PKT_QOS_H                 (98),
		.PKT_QOS_L                 (98),
		.PKT_DATA_SIDEBAND_H       (96),
		.PKT_DATA_SIDEBAND_L       (96),
		.PKT_ADDR_SIDEBAND_H       (95),
		.PKT_ADDR_SIDEBAND_L       (95),
		.PKT_BURST_TYPE_H          (94),
		.PKT_BURST_TYPE_L          (93),
		.PKT_CACHE_H               (121),
		.PKT_CACHE_L               (118),
		.PKT_THREAD_ID_H           (114),
		.PKT_THREAD_ID_L           (103),
		.PKT_BURST_SIZE_H          (92),
		.PKT_BURST_SIZE_L          (90),
		.PKT_TRANS_EXCLUSIVE       (71),
		.PKT_TRANS_LOCK            (70),
		.PKT_BEGIN_BURST           (97),
		.PKT_PROTECTION_H          (117),
		.PKT_PROTECTION_L          (115),
		.PKT_BURSTWRAP_H           (89),
		.PKT_BURSTWRAP_L           (81),
		.PKT_BYTE_CNT_H            (80),
		.PKT_BYTE_CNT_L            (72),
		.PKT_ADDR_H                (65),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (66),
		.PKT_TRANS_POSTED          (67),
		.PKT_TRANS_WRITE           (68),
		.PKT_TRANS_READ            (69),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (100),
		.PKT_SRC_ID_L              (99),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (101),
		.ST_DATA_W                 (127),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) module2sdram_write_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                       //       clk.clk
		.reset                 (sdram2module_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.av_address            (module2sdram_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (module2sdram_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (module2sdram_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (module2sdram_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (module2sdram_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (module2sdram_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (module2sdram_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (module2sdram_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (module2sdram_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (module2sdram_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (module2sdram_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (module2sdram_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (module2sdram_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (module2sdram_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (module2sdram_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (module2sdram_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (module2sdram_write_master_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (module2sdram_write_master_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (module2sdram_write_master_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (module2sdram_write_master_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (module2sdram_write_master_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (module2sdram_write_master_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (108),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_TRANS_LOCK            (52),
		.PKT_BEGIN_BURST           (79),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_POSTED          (49),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (81),
		.PKT_DEST_ID_H             (84),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                       //             clk.clk
		.reset                   (SDRAM_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                    //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset             (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	Computer_System_mm_interconnect_0_router router (
		.sink_ready         (arm_a9_hps_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (arm_a9_hps_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset              (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                      //       src.ready
		.src_valid          (router_src_valid),                                                      //          .valid
		.src_data           (router_src_data),                                                       //          .data
		.src_channel        (router_src_channel),                                                    //          .channel
		.src_startofpacket  (router_src_startofpacket),                                              //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router router_001 (
		.sink_ready         (arm_a9_hps_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (arm_a9_hps_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset              (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                  //       src.ready
		.src_valid          (router_001_src_valid),                                                  //          .valid
		.src_data           (router_001_src_data),                                                   //          .data
		.src_channel        (router_001_src_channel),                                                //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (sdram2module_read_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (sdram2module_read_master_agent_cp_valid),         //          .valid
		.sink_data          (sdram2module_read_master_agent_cp_data),          //          .data
		.sink_startofpacket (sdram2module_read_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram2module_read_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset              (sdram2module_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_002_src_ready),                            //       src.ready
		.src_valid          (router_002_src_valid),                            //          .valid
		.src_data           (router_002_src_data),                             //          .data
		.src_channel        (router_002_src_channel),                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (module2sdram_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (module2sdram_write_master_agent_cp_valid),         //          .valid
		.sink_data          (module2sdram_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (module2sdram_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (module2sdram_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset              (sdram2module_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_003_src_ready),                             //       src.ready
		.src_valid          (router_003_src_valid),                             //          .valid
		.src_data           (router_003_src_data),                              //          .data
		.src_channel        (router_003_src_channel),                           //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                        //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (sdram_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                    //       src.ready
		.src_valid          (router_004_src_valid),                    //          .valid
		.src_data           (router_004_src_data),                     //          .data
		.src_channel        (router_004_src_channel),                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)               //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (47),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (79),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (54),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (74),
		.PKT_BURST_SIZE_L          (72),
		.PKT_BURST_TYPE_H          (76),
		.PKT_BURST_TYPE_L          (75),
		.PKT_BURSTWRAP_H           (71),
		.PKT_BURSTWRAP_L           (63),
		.PKT_TRANS_COMPRESSED_READ (48),
		.PKT_TRANS_WRITE           (50),
		.PKT_TRANS_READ            (51),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (55),
		.OUT_BURSTWRAP_H           (71),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                       //       cr0.clk
		.reset                 (SDRAM_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                             //          .data
		.sink0_channel         (cmd_mux_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                            //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)          //          .ready
	);

	Computer_System_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset              (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_ready),              //      sink.ready
		.sink_channel       (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_channel),            //          .channel
		.sink_data          (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_data),               //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_endofpacket),        //          .endofpacket
		.sink_valid         (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_valid),              //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                  //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                  //          .valid
		.src0_data          (cmd_demux_src0_data),                                                   //          .data
		.src0_channel       (cmd_demux_src0_channel),                                                //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                          //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset              (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_ready),              //      sink.ready
		.sink_channel       (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_channel),            //          .channel
		.sink_data          (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_data),               //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_endofpacket),        //          .endofpacket
		.sink_valid         (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_valid),              //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                              //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                              //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                               //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                            //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux cmd_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset              (sdram2module_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.sink_ready         (sdram2module_read_master_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram2module_read_master_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram2module_read_master_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram2module_read_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram2module_read_master_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram2module_read_master_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                     //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                     //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                      //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                   //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux cmd_demux_003 (
		.clk                (System_PLL_sys_clk_clk),                                        //       clk.clk
		.reset              (sdram2module_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.sink_ready         (module2sdram_write_master_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (module2sdram_write_master_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (module2sdram_write_master_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (module2sdram_write_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (module2sdram_write_master_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (module2sdram_write_master_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                                      //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                      //          .valid
		.src0_data          (cmd_demux_003_src0_data),                                       //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                                    //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                                 //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                       //          .valid
		.src_data            (cmd_mux_src_data),                        //          .data
		.src_channel         (cmd_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                  //          .channel
		.sink0_data          (cmd_demux_src0_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),          //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),              //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                 //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),          //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),              //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                 //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),        //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (SDRAM_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_src1_data),                     //          .data
		.src1_channel       (rsp_demux_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),              //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                    //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                    //          .valid
		.src2_data          (rsp_demux_src2_data),                     //          .data
		.src2_channel       (rsp_demux_src2_channel),                  //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),              //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                    //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                    //          .valid
		.src3_data          (rsp_demux_src3_data),                     //          .data
		.src3_channel       (rsp_demux_src3_channel),                  //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),            //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset               (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                     //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                     //          .valid
		.src_data            (rsp_mux_src_data),                                                      //          .data
		.src_channel         (rsp_mux_src_channel),                                                   //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                               //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                  //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                  //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                   //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset               (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                 //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                 //          .valid
		.src_data            (rsp_mux_001_src_data),                                                  //          .data
		.src_channel         (rsp_mux_001_src_channel),                                               //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                           //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                                  //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                                  //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                                //          .channel
		.sink0_data          (rsp_demux_src1_data),                                                   //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                                             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux rsp_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset               (sdram2module_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                          //          .valid
		.src_data            (rsp_mux_002_src_data),                           //          .data
		.src_channel         (rsp_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                         //          .channel
		.sink0_data          (rsp_demux_src2_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket)                      //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux rsp_mux_003 (
		.clk                 (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset               (sdram2module_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                          //          .valid
		.src_data            (rsp_mux_003_src_data),                           //          .data
		.src_channel         (rsp_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_src3_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src3_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src3_channel),                         //          .channel
		.sink0_data          (rsp_demux_src3_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src3_endofpacket)                      //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (231),
		.OUT_PKT_RESPONSE_STATUS_L     (230),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (232),
		.OUT_PKT_ORI_BURST_SIZE_H      (234),
		.OUT_ST_DATA_W                 (235),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset                (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_mux_src_valid),                                                     //      sink.valid
		.in_channel           (rsp_mux_src_channel),                                                   //          .channel
		.in_startofpacket     (rsp_mux_src_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (rsp_mux_src_endofpacket),                                               //          .endofpacket
		.in_ready             (rsp_mux_src_ready),                                                     //          .ready
		.in_data              (rsp_mux_src_data),                                                      //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),        //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data),               //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel),            //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid),              //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready),              //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (188),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (231),
		.OUT_PKT_RESPONSE_STATUS_L     (230),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (232),
		.OUT_PKT_ORI_BURST_SIZE_H      (234),
		.OUT_ST_DATA_W                 (235),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset                (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_mux_001_src_valid),                                                 //      sink.valid
		.in_channel           (rsp_mux_001_src_channel),                                               //          .channel
		.in_startofpacket     (rsp_mux_001_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (rsp_mux_001_src_endofpacket),                                           //          .endofpacket
		.in_ready             (rsp_mux_001_src_ready),                                                 //          .ready
		.in_data              (rsp_mux_001_src_data),                                                  //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),        //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data),               //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel),            //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid),              //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready),              //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (80),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram2module_read_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset                (sdram2module_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_valid             (rsp_mux_002_src_valid),                                        //      sink.valid
		.in_channel           (rsp_mux_002_src_channel),                                      //          .channel
		.in_startofpacket     (rsp_mux_002_src_startofpacket),                                //          .startofpacket
		.in_endofpacket       (rsp_mux_002_src_endofpacket),                                  //          .endofpacket
		.in_ready             (rsp_mux_002_src_ready),                                        //          .ready
		.in_data              (rsp_mux_002_src_data),                                         //          .data
		.out_endofpacket      (sdram2module_read_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram2module_read_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram2module_read_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram2module_read_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram2module_read_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram2module_read_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (47),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (62),
		.IN_PKT_BYTE_CNT_L             (54),
		.IN_PKT_TRANS_COMPRESSED_READ  (48),
		.IN_PKT_TRANS_WRITE            (50),
		.IN_PKT_BURSTWRAP_H            (71),
		.IN_PKT_BURSTWRAP_L            (63),
		.IN_PKT_BURST_SIZE_H           (74),
		.IN_PKT_BURST_SIZE_L           (72),
		.IN_PKT_RESPONSE_STATUS_H      (105),
		.IN_PKT_RESPONSE_STATUS_L      (104),
		.IN_PKT_TRANS_EXCLUSIVE        (53),
		.IN_PKT_BURST_TYPE_H           (76),
		.IN_PKT_BURST_TYPE_L           (75),
		.IN_PKT_ORI_BURST_SIZE_L       (106),
		.IN_PKT_ORI_BURST_SIZE_H       (108),
		.IN_ST_DATA_W                  (109),
		.OUT_PKT_ADDR_H                (65),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (80),
		.OUT_PKT_BYTE_CNT_L            (72),
		.OUT_PKT_TRANS_COMPRESSED_READ (66),
		.OUT_PKT_BURST_SIZE_H          (92),
		.OUT_PKT_BURST_SIZE_L          (90),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (71),
		.OUT_PKT_BURST_TYPE_H          (94),
		.OUT_PKT_BURST_TYPE_L          (93),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) module2sdram_write_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                        //       clk.clk
		.reset                (sdram2module_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_valid             (rsp_mux_003_src_valid),                                         //      sink.valid
		.in_channel           (rsp_mux_003_src_channel),                                       //          .channel
		.in_startofpacket     (rsp_mux_003_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (rsp_mux_003_src_endofpacket),                                   //          .endofpacket
		.in_ready             (rsp_mux_003_src_ready),                                         //          .ready
		.in_data              (rsp_mux_003_src_data),                                          //          .data
		.out_endofpacket      (module2sdram_write_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (module2sdram_write_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (module2sdram_write_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (module2sdram_write_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (module2sdram_write_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (module2sdram_write_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (231),
		.IN_PKT_RESPONSE_STATUS_L      (230),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (232),
		.IN_PKT_ORI_BURST_SIZE_H       (234),
		.IN_ST_DATA_W                  (235),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset                (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_src_valid),                                                      //      sink.valid
		.in_channel           (router_src_channel),                                                    //          .channel
		.in_startofpacket     (router_src_startofpacket),                                              //          .startofpacket
		.in_endofpacket       (router_src_endofpacket),                                                //          .endofpacket
		.in_ready             (router_src_ready),                                                      //          .ready
		.in_data              (router_src_data),                                                       //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_endofpacket),        //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_data),               //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_channel),            //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_valid),              //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_ready),              //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_wr_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (188),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (189),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (231),
		.IN_PKT_RESPONSE_STATUS_L      (230),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (232),
		.IN_PKT_ORI_BURST_SIZE_H       (234),
		.IN_ST_DATA_W                  (235),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset                (ARM_A9_HPS_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_001_src_valid),                                                  //      sink.valid
		.in_channel           (router_001_src_channel),                                                //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                            //          .endofpacket
		.in_ready             (router_001_src_ready),                                                  //          .ready
		.in_data              (router_001_src_data),                                                   //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_endofpacket),        //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_data),               //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_channel),            //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_valid),              //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_ready),              //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_rd_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (80),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (81),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram2module_read_master_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset                (sdram2module_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_valid             (router_002_src_valid),                                         //      sink.valid
		.in_channel           (router_002_src_channel),                                       //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                                   //          .endofpacket
		.in_ready             (router_002_src_ready),                                         //          .ready
		.in_data              (router_002_src_data),                                          //          .data
		.out_endofpacket      (sdram2module_read_master_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram2module_read_master_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram2module_read_master_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram2module_read_master_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram2module_read_master_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram2module_read_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (65),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (80),
		.IN_PKT_BYTE_CNT_L             (72),
		.IN_PKT_TRANS_COMPRESSED_READ  (66),
		.IN_PKT_TRANS_WRITE            (68),
		.IN_PKT_BURSTWRAP_H            (89),
		.IN_PKT_BURSTWRAP_L            (81),
		.IN_PKT_BURST_SIZE_H           (92),
		.IN_PKT_BURST_SIZE_L           (90),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (71),
		.IN_PKT_BURST_TYPE_H           (94),
		.IN_PKT_BURST_TYPE_L           (93),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (47),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (62),
		.OUT_PKT_BYTE_CNT_L            (54),
		.OUT_PKT_TRANS_COMPRESSED_READ (48),
		.OUT_PKT_BURST_SIZE_H          (74),
		.OUT_PKT_BURST_SIZE_L          (72),
		.OUT_PKT_RESPONSE_STATUS_H     (105),
		.OUT_PKT_RESPONSE_STATUS_L     (104),
		.OUT_PKT_TRANS_EXCLUSIVE       (53),
		.OUT_PKT_BURST_TYPE_H          (76),
		.OUT_PKT_BURST_TYPE_L          (75),
		.OUT_PKT_ORI_BURST_SIZE_L      (106),
		.OUT_PKT_ORI_BURST_SIZE_H      (108),
		.OUT_ST_DATA_W                 (109),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) module2sdram_write_master_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                        //       clk.clk
		.reset                (sdram2module_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_valid             (router_003_src_valid),                                          //      sink.valid
		.in_channel           (router_003_src_channel),                                        //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                                    //          .endofpacket
		.in_ready             (router_003_src_ready),                                          //          .ready
		.in_data              (router_003_src_data),                                           //          .data
		.out_endofpacket      (module2sdram_write_master_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (module2sdram_write_master_cmd_width_adapter_src_data),          //          .data
		.out_channel          (module2sdram_write_master_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (module2sdram_write_master_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (module2sdram_write_master_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (module2sdram_write_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                         // (terminated)
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                  // in_clk_0.clk
		.in_rst_0_reset (SDRAM_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)            //         .error
	);

endmodule
